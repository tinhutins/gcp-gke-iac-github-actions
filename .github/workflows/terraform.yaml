name: 'Terraform CI'

on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:
    inputs:
      # Terraform action you want to perform
      action:
        required: true
        description: 'Terraform Action to Perform'
        type: choice
        options:
        - Terraform_apply
        - Terraform_destroy

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/test

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run:  terraform init 
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    #validate terraform
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      continue-on-error: true

    # - name: Update Pull Request
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: ${{ steps.plan.outputs.stdout }}
    #   with:
    #     github-token: ${{ secrets.TOKEN_GIT }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    #       <details><summary>Show Plan</summary>
    #       \`\`\`terraform\n
    #       ${process.env.PLAN}
    #       \`\`\`
    #       </details>
    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
    #       # On push to main, build or change infrastructure according to Terraform configuration files
    #       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && ${{ github.event.inputs.action == 'Terraform_apply' }}
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  
    - name: Terraform Destroy
      if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
      run: terraform destroy -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
